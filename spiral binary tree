/* In this question we are placing the tree in a spiral form and our task is 
to print the solution in an optimised way. In this approach what we did is we
created a stack and a queue in which we add the elements.
STEPS FOR THE PROGRAMS WE DID:
1) We create a stack and a queue, first we add root in the queue and create a variable named as
reverse and set it to false.
2)then we check if reverse = false in the program then we don't enter the while
loop and pop the elements from the queue.
3) After that we set it to true for it.
 * 
 */
import java.util.LinkedList;
import java.util.Queue;
import java.util.Stack;

class Node{
    int key;
    Node left;
    Node right;
    Node(int k){
        key=k;
        left=right=null;
    }
}
class Tree_spiralform{
    public static void main(String[] args) {
        Node root=new Node(1);
        root.left=new Node(2);
        root.right=new Node(3);
        root.left.left=new Node(4);
        root.left.right=new Node(5);
        root.right.left=new Node(6);
        root.right.right=new Node(7);
        printSpiral(root);
    }
    public static void printSpiral(Node root){
        if(root==null) return;
        Queue<Node> q=new LinkedList<>();
        Stack<Integer> s=new Stack<>();
        boolean reverse=false;
        q.add(root);
        while(q.isEmpty()==false){
            int count=q.size();
            for(int i=0;i<count;i++){
                Node curr=q.poll();
                if(reverse){
                    s.add(curr.key);
                }
                else
                    System.out.print(curr.key+" ");
                if(curr.left !=null) 
                    q.add(curr.left);
                if(curr.right !=null)
                    q.add(curr.right);

            }
            if(reverse){
                while(s.isEmpty()==false){
                    System.out.print(s.pop()+" ");
                }  
            }
            reverse = !reverse;
        }
    }
}
